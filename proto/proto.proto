syntax = "proto3";

package proto;

message Void {
}

enum Consistency {
    STRONG = 0;
    RELAXED_READS = 1;
}

message Query {
    string sql = 1;
    Consistency consistency = 2;
}

message QueryResults {
    repeated QueryRow rows = 1;
}

message QueryRow {
    repeated string values = 1;
}

message B {
    uint32 n = 1;
    uint64 priority = 2;
    uint64 pid = 3;
}

message Command {
    uint64 id = 1;
    string sql = 2;
}


message Commands {
    repeated Command entries= 1;
}

enum RpcSnapshotTypeEnum {
    COMPLETE = 0;
    DELTA = 1;
}

message RpcSnapshotType {
    RpcSnapshotTypeEnum t = 1;
    map<uint64, string> s = 2;
}

enum RpcSyncItemType {
    PHANTOM = 0;
    NONE = 1;
    EMPTY = 2; // None Option<SyncItem>
    
}
message RpcSyncItem {
    oneof v {
        Commands storecommands = 1; // ENTRIES
        RpcSnapshotType snapshottype = 2; // COMPLETE OR DELTA
        RpcSyncItemType syncitemtype = 3; // NONE OR PHANTOM
    }
}


message StopSign {
    uint32 config_id = 1;
    repeated uint64 nodes = 2;
    optional bytes metadata = 3;
}

message RpcMessage {
    uint64 from = 1;
    uint64 to = 2;
    oneof message {
        RpcPrepare rpcprepare = 3;
        RpcPromise rpcpromise = 4;
        RpcFirstAccept rpcfirstaccept = 5;
        RpcDecideStopSign rpcdecidestopsign = 6;
        RpcDecide rpcdecide = 7;
        RpcAcceptedStopSign rpcacceptedstopsign = 8;
        RpcAccepted rpcaccepted = 9;
        RpcAcceptSync rpcacceptsync = 10;
        RpcAcceptStopSign rpcacceptstopsign = 11;
        RpcAcceptDecide rpcacceptdecide = 12;
        RpcCompaction rpccompaction = 13;
        RpcProposalForward rpcproposalforward = 14;
        RpcPrepareReq rpcpreparereq = 15;
    }
}

message RpcPrepare {
    B n = 1;
    uint64 ld = 2;
    B n_accepted = 3;
    uint64 la = 4;
}

message RpcPromise {
    B n = 1;
    B n_accepted = 2;
    optional RpcSyncItem syncitem = 3;
    uint64 ld = 4;
    uint64 la = 5;
    optional StopSign stopsign = 6;
}

message RpcFirstAccept {
    B n = 1;
    repeated Command entries = 2;
}

message RpcDecideStopSign {
    B n = 1;
}

message RpcDecide {
    B n = 1;
    uint64 ld = 2;
}

message RpcAcceptedStopSign {
    B n = 1;
}

message RpcAccepted {
    B n = 1;
    uint64 la = 2;
}

message RpcAcceptSync {
    B n = 1;
    RpcSyncItem sync_item = 2;
    uint64 sync_idx= 3;
    optional uint64 decide_idx = 4;
    optional StopSign stopsign = 5;
}

message RpcAcceptStopSign {
    B n = 1;
    StopSign ss = 2;
}

message RpcAcceptDecide {
    B n = 1;
    uint64 ld = 2;
    repeated Command entries = 3;
}

message RpcCompaction {
    string s = 1;
    optional uint64 v = 2;
    bool itisforward = 3;
}

message RpcProposalForward{
    repeated Command entries = 3;
}

message RpcPrepareReq {
}

message RpcHeartbeatRequest {
    uint32 round = 1;
}

message RpcHeartbeatReply {
    uint32 round = 1;
    B ballot = 2;
    bool majority_connected = 3;
}

message RpcBleMessage {
    uint64 from = 1;
    uint64 to = 2;
    oneof message {
        RpcHeartbeatRequest heartbeatrequest = 3;
        RpcHeartbeatReply heartbeatreply = 4;
    }
}

service RPC {
    rpc Execute(Query) returns (QueryResults);
    rpc message(RpcMessage) returns (Void);
    rpc ble_message(RpcBleMessage) returns (Void);
}
